name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  DIR_NAME: test-actions
  IMAGE_NAME: ${{ github.repository }}-$DIR_NAME
  SCRIPT_NAME: docker-publish


on:
#   schedule:
#     - cron: '19 6 * * *'
  push:
    paths:
      - Docker/**
      - .github/workflows/**.yml

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.13.1'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        working-directory: Docker
        run: |
          echo first tests
          GIT_TAG=${{ steps.release_tag.outputs.version }}
          echo $GIT_TAG
          BASE_TAG="${{ github.repository_owner}}/"
          echo "BASE_TAG"
          GIT_TAG_COMMIT_SHA=$(echo $(git rev-list -n 1 $GIT_TAG))
          echo "GIT_TAG_COMMIT_SHA"
          GIT_MASTER_LATEST_COMMIT_SHA=$(echo $(git ls-remote --heads origin | grep master  |  awk -F '\t' '{print $1}'))
          echo "GIT_MASTER_LATEST_COMMIT_SHA"
          echo "git_describe=$(git describe)"
          echo old tests
          git clone https://github.com/garciagenrique/test_actions.git
          cd test_actions          
          
          echo "git_describe=$(git describe)"
          echo "git_describe=$(git describe | sed 's/-g/-/g')"
          echo "git_describe=$(git describe --tags | sed 's/-g/-/g')"

          echo "tag=$(git tag | sort --version-sort | tail -n1)"
          echo "short_sha=$(git rev-parse --short HEAD)" 
          export the_tag=$(git tag | sort --version-sort | tail -n1)
          export short_sha=$(git rev-parse --short HEAD)
          cd ..
          echo ${{ env.IMAGE_NAME }}
#          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest 
#          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
#          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${the_tag}_${short_sha}
#          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${the_tag}_${short_sha}
#          rm -rf test_actions          
